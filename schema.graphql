type User {
  id: ID!
  uid: String!
  name: String!
  accountId: String!
  image: String!
  description: String!
  twitter: String!
  instagram: String!
  facebook: String!
  homepage: String!
  birthday: String!
  pages: [Page!]!
  createdAt: String!
  updatedAt: String!
}

type Page {
  id: ID!
  name: String!
  text: String!
  user: User!
  image: String!
  createdAt: String!
  updatedAt: String!
}

type Query {
  users: [User!]!
  user(id: ID, accountId: String, uid: String): User!
  pages: [Page!]!
  page(id: ID): Page!
}

input NewUser {
  name: String!
  accountId: String!
  uid: String!
}

input UpdateUser {
  name: String
  description: String
  twitter: String
  instagram: String
  facebook: String
  homepage: String
  birthday: String
}

input NewPage {
  text: String!
  name: String!
  userId: ID!
}

input UpdatePage {
  text: String
  name: String
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUser(id: ID!, input: UpdateUser!): User!
  createPage(input: NewPage!): Page!
  updatePage(id: ID!, input: UpdatePage!): Page!
}

scalar Time